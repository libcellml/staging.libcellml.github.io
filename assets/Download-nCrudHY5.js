import{p as k,o as a,a as u,h as e,w as d,l as w,d as n,b as p,V as b,t as D,F as S,i as A,e as L,u as h,r as f,j as B,k as W,S as E}from"./index-BC701uVD.js";const N={},j={id:"downloadBlurb"};function F(m,i){return a(),u("div",j,[e(b,null,{default:d(()=>[e(w,null,{default:d(()=>i[0]||(i[0]=[n("p",{class:"mb-4"},[p(" libCellML is intended to be lightweight and transportable and as such the installers should contain everything you need to use libCellML. If you are building against the libCellML library, "),n("strong",null,"for Linux only"),p(", you will need to install the additional development package. ")],-1),n("p",{class:"mb-4"},[p(" When using Python the recommended installation method is to install the "),n("strong",null,"libcellml"),p(" package with pip. ")],-1),n("p",{class:"mb-4"},[p(" When using the Javascript the recommended installation method is to install the "),n("strong",null,"libcellml.js"),p(" package with yarn. ")],-1),n("p",{class:"mb-4"}," A complete list of assets for current and historical versions for each operating system is shown below. ",-1)])),_:1})]),_:1})])}const I=k(N,[["render",F]]),P={class:"asset-entry"},R=["href","download"],q={__name:"VersionEntries",props:{entries:Array},setup(m){const i=m,{entries:l}=D(i);return(v,V)=>(a(),u("div",P,[n("ul",null,[(a(!0),u(S,null,A(h(l),c=>(a(),u("li",{key:c.version,style:{"list-style-type":"none"}},[n("strong",null,L(c.version),1),n("ul",null,[(a(!0),u(S,null,A(c.assets,s=>(a(),u("li",{key:s.name},[n("a",{href:s.downloadUrl,download:s.name},L(s.name),9,R)]))),128))])]))),128))])]))}},y=k(q,[["__scopeId","data-v-ba20e0cd"]]),C={__name:"DownloadAssets",props:{macOSVersions:Array,winOSVersions:Array,linuxOSVersions:Array},setup(m){const i=m,{macOSVersions:l,winOSVersions:v,linuxOSVersions:V}=D(i);return(c,s)=>(a(),u(S,null,[e(b,null,{default:d(()=>[e(w,null,{default:d(()=>[s[0]||(s[0]=n("h2",{id:"windows-available-versions"},"Windows",-1)),s[1]||(s[1]=n("h3",null,"Available versions",-1)),e(y,{entries:h(v)},null,8,["entries"])]),_:1})]),_:1}),e(b,null,{default:d(()=>[e(w,null,{default:d(()=>[s[2]||(s[2]=n("h2",{id:"macos-available-versions"},"macOS",-1)),s[3]||(s[3]=n("h3",null,"Available versions",-1)),e(y,{entries:h(l)},null,8,["entries"])]),_:1})]),_:1}),e(b,null,{default:d(()=>[e(w,null,{default:d(()=>[s[4]||(s[4]=n("h2",{id:"linux-available-versions"},"Linux",-1)),s[5]||(s[5]=n("h3",null,"Available versions",-1)),e(y,{entries:h(V)},null,8,["entries"])]),_:1})]),_:1})],64))}},J={__name:"DownloadAllAssets",setup(m){const{checkDownloadAvailability:i}=B(),l=W(),v=f([]),V=f([]),c=f([]),s=f([]),x=f([]),g=f([]);function O(t,o,_){const r=t.value.find($=>$.version===_);r?r.assets.push(o):t.value.push({version:_,assets:[o]})}const M=l[0];for(const t of l){const o=M===t;i(t).then(_=>{if(_)for(const r of _.release.releaseAssets.edges)r.node.name.includes("macos")?O(o?v:s,r.node,t):r.node.name.includes("windows")?O(o?c:g,r.node,t):r.node.name.includes("ubuntu")&&O(o?V:x,r.node,t)})}return(t,o)=>(a(),u(S,null,[o[0]||(o[0]=n("h1",null,"Current libCellML release",-1)),e(C,{macOSVersions:v.value,linuxOSVersions:V.value,winOSVersions:c.value},null,8,["macOSVersions","linuxOSVersions","winOSVersions"]),o[1]||(o[1]=n("h1",null,"Previous libCellML releases",-1)),e(C,{macOSVersions:s.value,linuxOSVersions:x.value,winOSVersions:g.value},null,8,["macOSVersions","linuxOSVersions","winOSVersions"])],64))}},T={class:"download-view"},z={__name:"Download",setup(m){return(i,l)=>(a(),u("div",T,[l[0]||(l[0]=n("h1",null,"Download libCellML",-1)),e(E),l[1]||(l[1]=n("h2",null,"Dependencies and requirements",-1)),e(I),e(J)]))}};export{z as default};
